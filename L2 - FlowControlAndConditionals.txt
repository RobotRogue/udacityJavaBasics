Hello notes! https://classroom.udacity.com/courses/ud282/lessons/8192650550/concepts/38f71cca-9f97-4fbd-baee-7c39914b9376

###L2: Flow Control and Conditionals:

#Introducing Flow Control - IF and ELSE and ELSE IF statements

The IF statement is used to test conditions and execute code based on the input/the way the if statement is evaluated.

Here's an example of how it is broken down:

  boolean isCold = ??; // True or False

  if (isCold) {
    // This code only gets executed if the test condition is true.
    System.out.println("It's cold! Wear a coat!");
  }

For the above: if the boolean is true, the "Its cold!..." will be printed out.
If the above boolean is false, nothing will be printed out.


The ELSE statement is the code equivalent of 'otherwise'.

Here's how it is written:

  boolean isLightGreen = ? ; // true or false?

  is (isLightGreen) {
    System.out.println("Drive");
  } else {
    System.out.println("Stop");
  }

So for the above if the boolean is:
True - the codeblock in the "IF" statement would be run
False - the codeblock in the ELSE statement would be run, and the IF statement codeblock would be untouched.


The ELSE IF statement gives you more IF conditions to check against, instead of just IF/ELSE.

The below is an example of how this would look:

  boolean isLightGreen = ? ; // true or false?
  boolean isLightYellow = ? ; // true or false?

  is (isLightGreen) {
    System.out.println("Drive");
  } else-if (isLightYellow) {
    System.out.println("Slow down");
  } else {
    System.out.println("Stop");
  }

So for the first IF - the boolean is:
True - the codeblock in the "IF" statement would be run
False - it would then move to the ELSE IF.
For the ELSE-IF - the boolean is:
True - the codeblock in the "ELSE IF" statement would be run, the ELSE would not be run.
False - the codeblock in the ELSE statement would be run, and the IF and ELSE-IF statement codeblock would be untouched.


#Quiz - Multiple Else-IF's

What will the output of this program be?

  boolean passport = false;
  boolean birthCertificate = true;
  boolean driversLicense = true;

  if (passport) {
    System.out.println("A passport is a valid ID.");
  } else if (birthCertificate) {
    System.out.println("A birth certificate is a valid ID.");
  } else if (driversLicense) {
    System.out.println("A driver's license is a valid ID.");
  } else {
    System.out.println("Invalid ID. Your application is denied.");
  }

My Answer: A drivers license is a valid ID. -- wrong dumbass, its birth cert because that passed first. remember that its evaluated top down.

#Boolean Expressions - boolean values can be assigned also by running tests with comparisons like: 3 < 5 and so on.

  boolean b3 = 3 < 5; // this would eval to true.

Some other operators are:
  <= less than/equal to
  >= greater than/equal to
  != not equal to
  == is equal to

#Quiz - Evaluate These Expressions:

What boolean value do these expressions evaluate to?
Given that int x = 20;

  x <=21 // true (20 is less than 21)
  2*2 > 8 // false (4 is not greater than 8)
  5 != x // true (5 is not equal to 20)
  20 == x // true (20 is equal to 20)

#Tickets to the Art Museum: (Practical examples)

General = $10
Discount = $5 for -- 15 and under, age over 60, student

  int ticketPrice 10;
  int age = ?;
  boolean isStudent = ?;

  if (age <= 15) {
    ticketPrice = 5;
  } else if (age > 60) {
    ticketPrice = 5;
  } else if (isStudent) {
    ticketPrice = 5;
  }
  System.out.println(ticketPrice);

#Logical Operators: How to add multiple conditions to the IF or ELSE IF statements:

Here are the logical operators:
  && means AND
  || means OR
  ! means NOT

An example of this:

  3 < 5 && 2 > 15 // False (3 IS less than 5, but 2 is not greater than 15)
  3 < 5 || 2 > 15 // True - because at least ONE of them evaluated to true
  3 > 5 || 2 > 15 // False - because neither of them evaluated to true
  !(3 < 5) // False - because 3 IS less than 5 which is true, but the ! makes the statement False

So now the museum code can be rewritten to:

  int ticketPrice 10;
  int age = ?;
  boolean isStudent = ?;

  if (age <= 15 || age > 60 || isStudent) { // As long as those are all true, it runs the codeblock and applies the discount.
    ticketPrice = 5;
  System.out.println(ticketPrice);

#Order of Operations for Logical Operators - yep, there's always a catch!

Just like how math operators (*, /, +, -) have an order that they are evaluated in, ie. multiplication is evaluated before addition, so do logical operators!
The ! operator will be evaluated first, then &&, and finally ||.
If you have a bunch of the same operations in an expression, like multiple || combinations, then you just operate from left to right.

To change the order of operations you can surround expressions in parentheses because parentheses will be evaluated before anything else.

So, the order of operations is:

  Parentheses
  NOT !
  AND &&
  OR ||

For the expression:

  !true || false && true // This will have the NOT ! operator evaluated first, so this simplifies to:

  false || false && true // Then the AND && operator will be evaluated. The combination false && true equals false, and the whole expression becomes:

  false || false // Finally the OR || operator will be evaluated, and the whole expression evaluates to false.

#Quiz - True or False?

What boolean value do these expressions evaluate to?

  'a' == 'a' || false || 10 > 50   // True (because at least one is true in the OR, so it will automatically be true)
  true && 3 > 5   // False
  true && (3 > 5 || 2 < 10)   // True
  !(10 > 1)   // False

#Nested IF Statements - You've seen these before!!

You like action movies
Friend 1 likes romance
Friend 2 likes comedy or horror

Write an if statement that would satisfy all conditions - so you can find a movie everyone likes.

  boolean action = true;
  boolean romance = true;
  boolean comedy = false;
  boolean horror = true;

  if (action && romance && (comedy || horror)) {
    System.out.println("Congrats! You found a movie everyone can enjoy.");
  }

Sometimes instead of a complex conditional like we used above - you can instead make it easier to read/understand by using nested if statements...

  if (action && romance) {
    System.out.println("This movie includes action and romance.");
    if (comedy || horror) {
      System.out.println("This also includes comedy or horror.");
    }
  }

A benefit to this, is when you want to run different code for specific conditions inside as well.

#Quiz - Restaurant Rating System

What will the below code print for 'rating = 4'

  int rating = ?;
  if (rating > 0 && rating <= 5) {
    if rating <= 2) {
      System.out.println("What was the reason for your low rating?");
    }
    System.out.println("Thank you for your feedback!");
  }

  My Answer: Thank you for your feedback! -- correct

#Switch Statements - A switch statement let’s you check the value of a certain variable and test it for equality against a list of possible values that it can take.

Each of these specific values is called a case and you can program different behavior for each case.

In Java this looks like this:

  int passcode;
  switch (passcode) {
    case 555: coffeeType = "Espresso";
              break;
    case 312: coffeeType = "Vanilla Latte";
              break;
    case 629: coffeeType = "Drip Coffee";
              break;
    default: coffeeType = "Unknown entry";
              break;
  }
  System.out.println(coffeeType);

This code checks the value of passcode, which is some 3-digit integer value, and compares it to the specific case values: 555, 312, and 629.

Then if the variable equals a certain case value, the code after that case will be executed.
For example, in the code above, if passcode is equal to 312 then the coffeeType String will be set to ”Vanilla latte”.

Break;
After this code is this word break; which will break out of the case code and go to the ending curly brace of the switch statement, where this code prints the value of coffeeType.

So the break ensures that only one case at a time will have it’s code executed.

If the break were not included, Java would continue reading code in the switch statement line by line and keep executing statements
(like the default case code) until it reaches the end of the switch statement or hits another break!

Default case
The default case typically comes at the end of a switch statement and its code will execute whenever the other cases aren’t met.
So, if the passcode was something like 914, this code doesn’t have a case for this particular value, and so it would fall into the default category and
the coffeeType String would be set to “Unknown".

(The conventional form of the above would look like this:)

  int passcode;
  String coffeeType;
  if (passcode == 555) {
    coffeeType = "Espresso";
  } else if (passcode == 312) {
    coffeeType = "Vanilla Latte";
  } else if (passcode == 629) {
    coffeeType = "Vanilla Latte";
  } else {
    coffeeType = "Unknown";
  }
  System.out.println(coffeeType);


#Quiz - Switch(Month)

Complete this switch statement by writing:
1) The last case (case 12), so that it prints out December, and
2) a default case that for any month number not between 1 and 12 will print out 'invalid month'

  int month = ?; // a number, 1-12
  String monthString;
  switch (month) {
    case 1: monthString = "January";
            break;
    case 2: monthString = "February";
            break;
    case 3: monthString = "March";
            break;
    case 4: monthString = "April";
            break;
    case 5: monthString = "May";
            break;
    case 6: monthString = "June";
            break;
    case 7: monthString = "July";
            break;
    case 8: monthString = "August";
            break;
    case 9: monthString = "September";
            break;
    case 10: monthString = "October";
            break;
    case 11: monthString = "November";
            break;
    case 12: monthString = "December";
            break;
    default: monthString = "Invalid Month";
            break;
    }
  System.out.println(monthString);

#L2 Project:

Q1) What will the following block of Java code print?

  double balance = 0;
  balance = balance + 20; //Add quarter 1 profits (thousands).
  balance = balance - 25; //Subtract quarter 1 expenses (thousands).
  balance = balance + 30; //Add quarter 2 profits (thousands).
  balance = balance - 25; //Subtract quarter 1 expenses (thousands).

  if (balance < 0) {
  System.out.println("We’re in the red!");
  } else if (balance > 0) {
  System.out.println("We made a profit!");
  } else {
  System.out.println("We broke even.");
  }
A. We’re in the red!
B. We made a profit!
C. We broke even. -- MY ANSWER. -- correct.

Q2) What will be printed by the block of Java code below?

  int dogs = 1;
  int cats = 2;

  if (dogs > 0 && cats == 0) { // Does not meet this condition - skipping codeblock
    if (dogs > 1) {
      System.out.println("Dog lover");
    } else {
      System.out.println("Dog person");
    }
  } else if (cats > 0 && dogs == 0) { // Does not meet this condition - skipping codeblock
    if (cats > 1) {
      System.out.println("Cat lover");
    } else {
      System.out.println("Cat person");
    }
      System.out.println("Meow!");
  } else if (cats > 0 && dogs > 0) { // Meets this condition - moving on to codeblock
    if (dogs > cats) { // Does not meet this condition, moving on
      System.out.println("I guess you like dogs more");
    } else if (dogs == cats) { // Does not meet this condition, moving on
      System.out.println("I guess you like both equally");
    } else { // Didnt meet previous conditions, executing below codeblock
      System.out.println("I guess you like cats more");
    }
  } else { // Does not meet this condition - skipping codeblock
    System.out.println("What, don’t you like pets?");
  }

My Answer: I guess you like cats more -- correct.

Q3) You are programming the behavior of an enemy in a video game.

The enemy code has access to two boolean variables, canSeePlayer and playerPoweredUp.
canSeePlayer is true when the enemy can see the player and false otherwise, and
playerPoweredUp is true when the player has found a special item that makes them impossible to defeat temporarily.

Fill in the correct conditions so that “Attack!” is printed when the enemy can see the player and the player is not
powered-up, “Run away!” is printed when the player is visible and is powered-up, and finally,
“Wander.” is printed if the player is not visible.

Starting code:
boolean canSeePlayer;
boolean playerPoweredUp;

  if (canSeePlayer) {
    if (!isPoweredUp) { // I missed the 'not' logic...
      System.out.println("Attack!");
    } else {
      System.out.println("Run away!");
    }
  } else {
    System.out.println("Wander.");
  }

Q4) Assume you have access to two boolean variables, isSnowing, and isRaining, and one
double variable, temperature. isSnowing is true when it’s snowing and false otherwise,
isRaining is true when it’s raining and false otherwise, and temperature gives the outdoor
temperature in degrees Fahrenheit. Write code that prints “Let’s stay home.” if it’s raining,
snowing, or below 50 degrees Fahrenheit (10 degrees Celsius), and prints “Let’s go out!”
otherwise.

Starting code:
  //Assume these can have any value:
  boolean isSnowing = false;
  boolean isRaining = true;
  double temperature = 60.0;
  //TODO: print "Let’s stay home." if its raining, snowing or below 50 degrees and print "Let’s go out!" otherwise.
  // My answer below:
  if (isSnowing || isRaining || temperature < 50) {
    System.out.println("Let’s stay home.");
  } else {
    System.out.println("Let’s go out!");
  }

Q5) Assume you have access to a double variable called time. Write code that assigns a different
value to the String variable timeOfDay based on the value of time in hours. If time is
between 5 and 12, including 5 but not including 12, set timeOfDay to “morning”. If time is
between 12 and 20, including 12 but not including 20, set timeOfDay to “daytime”. Finally,
if the time variable does not satisfy either condition, set timeOfDay to “night”.

Starting code:
  //Assume this could have any value between 0 and 24:
  int time = 18;
  String timeOfDay;
  if (time >= 5 && time < 12) {
    System.out.println("morning"); // shit, supposed to set time of day variable, not print out
    timeOfDay = "morning";
  } else if (time >= 12 && time < 20) {
    System.out.println("daytime"); // shit, supposed to set time of day variable, not print out
    timeOfDay = "daytime";
  } else {
    System.out.println("evening"); // shit, supposed to set time of day variable, not print out
    timeOfDay = "evening";
  }

Q6) Assume you have access to an integer variable called dayOfTheWeek and a boolean variable
called holiday, which is true when it is a holiday and false on normal days. Write Java
code that prints “Wake up at 7:00” on weekdays that are not holidays, and prints “Sleep
in!” on weekends and holidays.

For the variable dayOfTheWeek, use this key:
  1 = Monday
  2 = Tuesday
  3 = Wednesday
  4 = Thursday
  5 = Friday
  6 = Saturday
  7 = Sunday

Starting code:
  //Assume these could have any value:
  int dayOfTheWeek = 5;
  boolean holiday = false;

  if (dayOfTheWeek >= 1 && dayOfTheWeek <= 5 && !holiday) {
    System.out.println("Wake up at 7:00");
  } else {
    System.out.println("Sleep in!");
  }

Q7) Find the error in this Java code. (Hint: think about scope!)

Imagine that the variables rewinding and playbackPosition could have different values
depending on the situation.

  double playbackPosition = 120
  boolean rewinding = true;

  if (rewinding) {
    double rewindAmount = 0.1;
  }
  playbackPosition = playbackPosition - rewindAmount;

My Answer: "playbackPosition = playbackPosition - rewindAmount;" should be inside the 'if' codeblock, not outside of it.
(Because rewindAmount variable is only available inside the IF)

Q8) Assume the int variable dayOfWeek has some value, and that it follows this rule:
  1 = Monday
  2 = Tuesday
  3 = Wednesday
  4 = Thursday
  5 = Friday
  6 = Saturday
  7 = Sunday

Declare a String variable called schedule and write a switch statement that gives schedule
a different value based on the day of the week. For Monday, give it the value “Gym in the
morning.” For Tuesday give it the value “Class after work.” For Wednesday, give it the value
“Meetings all day.” For Thursday give it the value “Work from home.” For Friday, give it
the value “Game night after work.” For Saturday and Sunday, give it the value “Free!” This
should also be the default value.
OR (optional): decide what to assign schedule for each day based on your own weekly
schedule!

Starting code:
  //Assume this can have any value from 1 to 7:
  int dayOfWeek = 1;
  String schedule;

  switch dayOfWeek {
    case 1: schedule = "Gym in the morning.";
            break;
    case 2: schedule = "Class after work.";
            break;
    case 3: schedule = "Meetings all day.";
            break;
    case 4: schedule = "Work from home.";
            break;
    case 5: schedule = "Game night after work.";
            break;

    case 6: case 7: deafult: schedule = "Free!"; //Tip: when you have several identical cases, you can list them together like this.
            break;
  }
