Hello notes!

###L1: Variables and Data Types

#Variables - java variables have a name and a value (the name is immutable, the value can change)

Java varaibles have to have an assigned type. Such as INT or STRING, etc. This cannot be changed.

To declare a variable, you can type the following:

  int passengers;

To initialize (set a value for) the variable, type in:

  passengers = 0;

To update the variable (since its initially 0 in this case...), you would:

  passengers = passengers + 5

#Displaying Variables - a way of displaying the value stored inside a variable

One way is to print a line to the console, so using the example variable above,
it would look like this:

  System.out.println(passengers);

#String Variables - can contain on or many characters (and, its even indexed!)

The syntax would look like this:

  String driver;

And to initialize:

  driver = "Hamish";

Want to know how many letters are in that string? Use this!

  int letters = driver.length();
  System.out.println(letters);

Want to update every char in the strin to uppercase? Use this!

  String driver;
  driver = "Hamish";
  driver = driver.toUpperCase();
  System.out.println(driver);

#String Concatenation - Joining strings together to build a longer string.

Here's an example of string concatenation:

  String driverFirstName;
  driverFirstName = "Hamish";
  String driverLastName;
  driverLastName = "Blake";
  String driverFullName = driverFirstName + driverLastName;
  System.out.println(driverFullName);

The above code is concatenated, not formatted in a friendly way. If you want to do the same, but make it readable (with like, a space in between f/l name) do this:

  String driverFirstName;
  driverFirstName = "Hamish";
  String driverLastName;
  driverLastName = "Blake";
  String driverFullName = driverFirstName + " " + driverLastName;
  System.out.println(driverFullName);

You can also do that to integer values:

  int stops;
  int fare;
  stops = 0;
  fare = 0;
  stops = stops + 1;
  fare = fare + 5;
  System.out.println("The bus made $" + fare + " after " + stops + "stops.");

#String Quiz - What would this output?

  String language = "java";
  String feeling = "Love";
  feeling = feeling.toLowerCase();
  language = language.toUpperCase();
  System.out.println("I " + feeling + " " + language);

Answer: I love JAVA

#Variable Names - rules and regulations

  String driverFirstName;
  driverFirstName = "Hamish";

When creating a variable name, always follow the lower camel case, like the variable name above.

Variable name rules:
Try to always use full words and not abbreviations.
Variable names are case sensitive.
Start your variable names with a letter.
You can start with $ or _ but its not advised.
You cannot have spaces in variable names.

Oh, and the way we were declaring and initializing variables separately above? You can do it all at once, to save typing and codespace, like this:

  String player = "Jack";
  int stockPrice = 100;

And so on...

#Data Types - More than just int and String...

int is limited to 10 digits.
Long is limited to 10 digits * 10000000
Double can store data types with decimal places

String - we know this one
char - stores a single character only, ie: char answer = 'b'; (Note: This uses single quote only!!)

boolean - stores true or false, thats it.

Just google "Java Data Types" for more about this. There's a lot. These are the main ones tho.

#Variable Arithmetic - Doing math with code

Here are some various examples:

  int x = 2+3;
  int y = 4-5;
  int temp = -20;
  int days = 7*4;
  double div = 5/2

Now, there is truncation if you divide numbers and it results in a fraction, if the data type is not double, then it will truncate the remainder in the division.
This is not always a bad thing, there are times where you want this to happen.

#Casting - To turn an int value into a double:

  int x = 5;
  int y = 2;
  double div = x/y;
  System.out.println(div); //would output 2
  double.accurate = (double)x/y;
  System.out.println(accurate); //would output 2.5


#Comments! - Best practices when coding

The standard java (and javascript!) syntax for commenting is:

  // single line comment

  /*
  Multi
  Line
  Comment
  */

It's good practice to explain what functionality does via commenting, especially when other people read your code.


#Quiz - The 5th Subject (Calculate the average grade)
